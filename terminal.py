import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils import executor

API_TOKEN = "7718204976:AAGhQNlS9ulnqj_SatBQucQTsABVnOE9Co0"
OWNER_ID = 6450469685  # <-- –¢–≤–æ–π Telegram user ID

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    await message.answer("üñ•Ô∏è –ë–æ—Ç-—Ç–µ—Ä–º–∏–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω.\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É.")

# –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.message()
async def execute_command(message: Message):
    if message.from_user.id != OWNER_ID:
        return

    cmd = message.text.strip()

    try:
        proc = await asyncio.create_subprocess_shell(
            cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )

        stdout, stderr = await proc.communicate()

        result = ""
        if stdout:
            result += f"<b>üì§ –í—ã–≤–æ–¥:</b>\n<code>{stdout.decode().strip()}</code>\n"
        if stderr:
            result += f"<b>‚ö†Ô∏è –û—à–∏–±–∫–∞:</b>\n<code>{stderr.decode().strip()}</code>"

        if not result:
            result = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–µ–ª–∞."

        await message.reply(result[:4096])

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: <code>{e}</code>")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    from aiogram import F

    dp.include_router(dp.router)
    asyncio.run(dp.start_polling(bot))