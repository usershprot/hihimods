import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
import time

API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"

DONATION_MIN_USD = 0.13
MAX_USERS = 4
SESSION_DURATION = 12 * 3600  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–µ—Å—Å–∏–π
conn = sqlite3.connect("hikkahostlite.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    api_id TEXT,
    api_hash TEXT,
    session_start INTEGER,
    paid INTEGER DEFAULT 0
)
""")
conn.commit()

# FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class Form(StatesGroup):
    waiting_api_id = State()
    waiting_api_hash = State()
    waiting_auth_choice = State()
    waiting_donation = State()
    waiting_code = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_blockquote(text: str) -> str:
    return f"<blockquote>{text}</blockquote>"

def is_user_active(user_id: int):
    cursor.execute("SELECT session_start FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        return False
    session_start = row[0]
    if session_start + SESSION_DURATION > int(time.time()):
        return True
    else:
        # –°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        conn.commit()
        return False

def count_active_users():
    now = int(time.time())
    cursor.execute("SELECT COUNT(*) FROM users WHERE session_start + ? > ?", (SESSION_DURATION, now))
    return cursor.fetchone()[0]

async def check_user_allowed(user_id: int) -> bool:
    active = is_user_active(user_id)
    if active:
        return True
    if count_active_users() >= MAX_USERS:
        return False
    return True

async def start_session(user_id: int):
    now = int(time.time())
    cursor.execute("INSERT OR REPLACE INTO users (user_id, session_start, paid) VALUES (?, ?, 1)", (user_id, now))
    conn.commit()

# –•–µ–Ω–¥–ª–µ—Ä—ã

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    user_allowed = await check_user_allowed(message.from_user.id)
    if not user_allowed:
        await message.answer(format_blockquote("üö´ –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."), parse_mode="HTML")
        return
    if is_user_active(message.from_user.id):
        await message.answer(format_blockquote("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."), parse_mode="HTML")
        await state.set_state(Form.waiting_code)
        return
    await message.answer(format_blockquote("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID:"), parse_mode="HTML")
    await state.set_state(Form.waiting_api_id)

@dp.message(Form.waiting_api_id)
async def process_api_id(message: types.Message, state: FSMContext):
    await state.update_data(api_id=message.text.strip())
    await message.answer(format_blockquote("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API HASH:"), parse_mode="HTML")
    await state.set_state(Form.waiting_api_hash)

@dp.message(Form.waiting_api_hash)
async def process_api_hash(message: types.Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ QR", callback_data="auth_qr_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –ø–æ –∫–æ–¥—É", callback_data="auth_qr_no")
        ]
    ])
    await message.answer(format_blockquote("–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ QR-–∫–æ–¥—É?"), parse_mode="HTML", reply_markup=kb)
    await state.set_state(Form.waiting_auth_choice)

@dp.callback_query(lambda c: c.data in ["auth_qr_yes", "auth_qr_no"])
async def process_auth_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    if callback.data == "auth_qr_yes":
        await callback.message.answer(format_blockquote("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ QR. –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–º QR-–∫–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞)."), parse_mode="HTML")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞:
        await callback.message.answer(format_blockquote("[QR-–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]"), parse_mode="HTML")
        await start_session(callback.from_user.id)
        await state.clear()
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª 'n' –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∑–∞–≥–ª—É—à–∫–∞)
        await callback.message.answer(format_blockquote("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –∫–æ–¥—É. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 'n' –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."), parse_mode="HTML")
        # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 'n' —á–µ—Ä–µ–∑ SSH
        await start_session(callback.from_user.id)
        await state.clear()

@dp.message(Form.waiting_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()
    # –ó–∞–≥–ª—É—à–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞
    await message.answer(format_blockquote(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {code}\n–ü—Ä–æ–≤–µ—Ä—è–µ–º..."), parse_mode="HTML")
    # –í —Ä–µ–∞–ª–µ –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    await start_session(message.from_user.id)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–Ω–∞—Ç–∞ - –∑–∞–≥–ª—É—à–∫–∞
@dp.message(Command(commands=["donate"]))
async def cmd_donate(message: types.Message):
    await message.answer(format_blockquote(
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç –º–∏–Ω–∏–º—É–º 0.13$.\n"
        "–ü–ª–∞—Ç—ë–∂ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ CryptoBot.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø."
    ), parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(dp.start_polling(bot))